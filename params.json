{"name":"RunYouFools!","tagline":"generic, language agnostic system-test runner","body":"# Run You Fools!\r\n\r\nThe basic idea behind RunYouFools is that system tests should be simple\r\nscripts, whose exit code determines their success (or failure).\r\n\r\nMost testing framework are more suitable for unit tests. System tests require a broader perspective,\r\nand a simpler format. I believe that system tests should be readable, self-explanatory scripts that just\r\nrun from top to bottom, e.g. this little bit of Python:\r\n\r\n```python\r\n    # test_basic_client_server_chat.py\r\n    # these are the real thing, not Moch objects of any kind\r\n    server = Server()\r\n    clinet = client()\r\n    client.sendMessage( \"what's up, server?\" )\r\n    assert server.response() == \"I'm OK, how are you?\"\r\n```\r\n\r\nDifferent tests should reside in different files, again unlike unit tests.\r\n\r\nThe purpose of runyoufools is to supply the user with a runner to run his/her tests,\r\nno matter if these tests are Ruby, Python, C++, Perl - whatever - with appropriate hooks for test setup.\r\n\r\n# Installation\r\n\r\nRunYouFools is a ruby gem:\r\n\r\n    $ gem install runyoufools\r\n\r\nOnce it is installed, run it with:\r\n\r\n    $ runyoufools --help\r\n\r\nTo get an explanation. \r\n\r\n# Basic Operation\r\n\r\nBasically, you specify a filename pattern with `--pattern`,\r\nwhich RunYouFools uses to determine which files are tests (all relative the\r\ncurrent directory). The pattern is a *regular expression*, *NOT* a \"glob\".\r\nGoogle regular expressions if you don't know what they are.\r\n\r\nSo, to run all tests in the `test/system` directory:\r\n\r\n    $ runyoufools --pattern test/system/\r\n\r\nNote that if you do not include the final `/`, RunYouFools might try to run a file called `test/system.log`.\r\n\r\nThe pattern is *MANDATORY*.\r\n\r\n# Adjusting The Pattern\r\n\r\nIf you're not entirely sure which pattern you should specify, use the `--list` option.\r\n\r\n    $ runyoufools --pattern test/system/ --list\r\n\r\nThis will tell RunYouFools to only *print* the test files it finds, *without* actually running them.\r\n\r\n# What if I don't want my test files to be executable?\r\n\r\nNo problem, just specify how to run them with the `--command`. If, for example, your system tests are python scripts in the `test/system` directory:\r\n\r\n    $ runyoufools --pattern test/system/ --command python\r\n\r\n# My tests sometimes fail for no good reason - what to do?\r\n\r\nIn my experience, some system tests can fail without indicating an actual error. Some Selenium tests for example, may fail for some weird selenium bug that happens now and then, and has nothing to do with your code. To circumvent this, you can use retries. The rational is that if a test fails many times, it's probably an actual failure.\r\n\r\n    $ runyoufools --retries 3           # retry test 3 times before declaring a failue\r\n\r\nBy default, there is only one trial per test.\r\n\r\n# TODO\r\n\r\n* setup and tear-down configuration\r\n* Support different runners for different test types, e.g. `python` for Python, `perl` for perl. I'm not sure this is needed, but I may add it in the future.\r\n* Integration with some reporting systems\r\n","google":"UA-61826909-1","note":"Don't delete this file! It's used internally to help with page regeneration."}